pipeline {
    agent { label 'Task_Agent_1' }
    environment {
        DOCKER_HUB_CREDENTIALS = 'docker-cred'
        IMAGE_NAME = 'ameysalvi5675/py-app'
        TAG = 'latest'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ameysalvi5675-boop/Jenkins.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-cred', variable: 'DOCKER_PASSWORD')]) {
                    sh "echo \$DOCKER_PASSWORD | docker login -u ameysalvi5675 --password-stdin"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${IMAGE_NAME}:${TAG}"
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    echo "Pulling Docker image ${IMAGE_NAME}:${TAG}"
                    sh "docker pull ${IMAGE_NAME}:${TAG}"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo "Running the Docker container from ${IMAGE_NAME}:${TAG}"
                    // Capture the container ID from the `docker run` command
                    def containerId = sh(script: "docker run -d ${IMAGE_NAME}:${TAG}", returnStdout: true).trim()
                    echo "Container ID is ${containerId}"
                    // Store the container ID for cleanup
                    currentBuild.description = "Container ID: ${containerId}"
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Get the container ID stored from the previous stage
                    def containerId = currentBuild.description.replace("Container ID: ", "")
                    echo "Cleaning up by stopping and removing the container"
                    // Stop and remove the container
                    sh "docker stop ${containerId}"
                    sh "docker rm ${containerId}"
                    // Optionally, remove the image from the local system
                    sh "docker rmi ${IMAGE_NAME}:${TAG}"
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up Docker system'
            sh 'docker system prune -f'
        }
    }
}
